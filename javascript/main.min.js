var API_KEY = "ii4TLRjfMoszcoDkrxBKUk5isHgx0ezQnJ8JWGntYIboVVigez";
var untagged_total = 0;
var queryParams = (function(a) {
  if (a == "") return {};
  var b = {};
  for (var i = 0; i < a.length; ++i) {
    var p = a[i].split('=', 2);
    if (p.length == 1) b[p[0]] = "";
    else b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " ")).replace(/\//g, "");
  }
  return b;
})(window.location.search.substr(1).split('&'));
var normalise_url = function(url) {
  url = url.replace(/^http[s]{0,}:\/\//g, "");
  url = url.replace(/\/$/g, "");
  return url;
};
var API_URL = "http://api.tumblr.com/v2/blog/" + normalise_url(queryParams.hostname) + "/posts";
if (queryParams.include_reblogs == "true") var is_untagged = function(post) {
  return !post.tags.length;
};
else var is_untagged = function(post) {
  return (!post.tags.length) && (!post.hasOwnProperty("reblogged_root_id"));
};
var optionString = function(hostname, include_reblogs, post_type) {
  var optString = "Getting untagged posts for <span class=\"option\">" + hostname + "</span> which ";
  optString += "<span class=\"option\">";
  if (include_reblogs == "true") optString += "include";
  else optString += "exclude";
  optString += "</span> reblogs";
  if (post_type == "all") return (optString + ".");
  optString += " and only includes <span class=\"option\">";
  switch (post_type) {
    case "text":
    case "photo":
    case "link":
    case "chat":
    case "audio":
    case "answer":
      optString += post_type + " posts";
      break;
    case "quote":
    case "video":
      optString += post_type + "s";
      break;
  }
  return (optString + "</span>.");
};
var makeRequest = function(offset, total, post_type, success_callback) {
  var tmpData = {
    "reblog_info": "true",
    "api_key": API_KEY
  };
  if (offset > 0) tmpData.offset = offset;
  if (post_type != "all") tmpData.type = post_type;
  $.ajax({
    url: API_URL,
    data: tmpData,
    callback: "JSON_CALLBACK",
    dataType: "json",
    success: function(response) {
      success_callback(response, offset, total, post_type);
    }
  });
};
var update_page = function(response, offset, total, post_type) {
  for (var i in response.response.posts) {
    var post = response.response.posts[i];
    if (is_untagged(post)) {
      untagged_total += 1;
      document.getElementById("posts").innerHTML += ("<li><a href=\"" + post.post_url + "\">" + post.post_url + "</a></li>");
    }
  }
  document.getElementById("untagged_total").innerHTML = untagged_total;
  if (offset < total) {
    document.getElementById("offset").innerHTML = offset;
    getPosts(offset + 20, total, post_type);
  } else {
    document.getElementById("first_response").innerHTML = "";
    document.getElementById("status").innerHTML = "<p>Iâ€™ve finished looking, and I found " + untagged_total + " untagged posts.</p>";
  }
};
var getPosts = function(offset, total, post_type) {
  makeRequest(offset, total, post_type, update_page);
};
var initial_success = function(response, offset, total, post_type) {
  if (response.meta.status === 200) {
    document.getElementById("first_response").innerHTML = "<p>I found your blog! Searching for untagged posts:";
    var statusstring = "<p>Looked through <span id=\"offset\">0</span> of " + response.response.total_posts + " total post";
    if (response.response.total_posts != 1) statusstring += "s";
    statusstring += ": (found <span id=\"untagged_total\">0</span> untagged posts)</p>";
    document.getElementById("status").innerHTML = statusstring;
    getPosts(0, response.response.total_posts, post_type);
  } else {
    var error_msg = "<p>I tried to look up your untagged posts, but I got an error.</p>";
    error_msg += "<p>This is the message from the Tumblr API:</p>";
    error_msg += "<pre>Status code " + response.meta.status + ". " + response.meta.msg + ".</pre>";
    error_msg += "<p>If the problem persists, please <a href=\"/contact\">let me know</a>.</p>";
    document.getElementById("first_response").innerHTML = error_msg;
  }
};
